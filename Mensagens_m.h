//
// Generated file, do not edit! Created by opp_msgtool 6.1 from Mensagens.msg.
//

#ifndef __MENSAGENS_M_H
#define __MENSAGENS_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class TabelaRoteamento;
/**
 * Class generated from <tt>Mensagens.msg:10</tt> by opp_msgtool.
 * <pre>
 * // Esta mensagem contém a tabela de roteamento de um nó
 * // É como se fosse uma "carta" dizendo: "Ei vizinho, eu sei chegar nestes lugares!"
 * packet TabelaRoteamento
 * 
 * {
 *     int remetente;          // Quem está enviando esta tabela
 *     int destinos[];         // Lista de lugares que eu sei chegar
 *     double custos[];        // Quanto custa chegar em cada lugar
 * }
 * </pre>
 */
class TabelaRoteamento : public ::omnetpp::cPacket
{
  protected:
    int remetente = 0;
    int *destinos = nullptr;
    size_t destinos_arraysize = 0;
    double *custos = nullptr;
    size_t custos_arraysize = 0;

  private:
    void copy(const TabelaRoteamento& other);

  protected:
    bool operator==(const TabelaRoteamento&) = delete;

  public:
    TabelaRoteamento(const char *name=nullptr, short kind=0);
    TabelaRoteamento(const TabelaRoteamento& other);
    virtual ~TabelaRoteamento();
    TabelaRoteamento& operator=(const TabelaRoteamento& other);
    virtual TabelaRoteamento *dup() const override {return new TabelaRoteamento(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getRemetente() const;
    virtual void setRemetente(int remetente);

    virtual void setDestinosArraySize(size_t size);
    virtual size_t getDestinosArraySize() const;
    virtual int getDestinos(size_t k) const;
    virtual void setDestinos(size_t k, int destinos);
    virtual void insertDestinos(size_t k, int destinos);
    [[deprecated]] void insertDestinos(int destinos) {appendDestinos(destinos);}
    virtual void appendDestinos(int destinos);
    virtual void eraseDestinos(size_t k);

    virtual void setCustosArraySize(size_t size);
    virtual size_t getCustosArraySize() const;
    virtual double getCustos(size_t k) const;
    virtual void setCustos(size_t k, double custos);
    virtual void insertCustos(size_t k, double custos);
    [[deprecated]] void insertCustos(double custos) {appendCustos(custos);}
    virtual void appendCustos(double custos);
    virtual void eraseCustos(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const TabelaRoteamento& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, TabelaRoteamento& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline TabelaRoteamento *fromAnyPtr(any_ptr ptr) { return check_and_cast<TabelaRoteamento*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __MENSAGENS_M_H

